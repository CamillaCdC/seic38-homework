"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// import * as rp from 'request-promise-native';
const node_fetch_1 = __importDefault(require("node-fetch"));
// eslint-disable-next-line func-names
const ats = function (arr) {
    let str = '';
    for (let i = 0; i < arr.length; i += 1) {
        if (i !== 0) {
            str += `,${arr[i]}`;
        }
        else {
            str += arr[i];
        }
    }
    return str;
};
const sf = class StockFinder {
    constructor(version, tickers, apiKey, curl) {
        this.version = version;
        this.tickers = tickers;
        this.apiKey = apiKey;
        this.curl = curl;
        this.error = {};
    }
    getStock() {
        return new Promise((resolve, reject) => {
            const url = `https://cloud.iexapis.com/${this.version}/tops?token=${this.apiKey}&symbols=${this.tickers}`;
            if (this.apiKey !== undefined) {
                node_fetch_1.default(url).then((res) => res.json()).then((body) => {
                    resolve(body);
                }).catch((err) => reject(err));
            }
            else {
                reject(new Error('API key was not defined'));
            }
        });
    }
    getStocks() {
        return new Promise((resolve, reject) => {
            if (typeof this.tickers === 'object') {
                const stocks = ats(this.tickers);
                const url = `https://cloud.iexapis.com/${this.version}/tops?token=${this.apiKey}&symbols=${stocks}`;
                if (this.apiKey !== undefined) {
                    node_fetch_1.default(url).then((res) => res.json()).then((body) => {
                        resolve(body);
                    }).catch((err) => reject(err));
                }
                else {
                    reject(new Error('API key was not defined'));
                }
            }
        });
    }
};
module.exports = sf;
